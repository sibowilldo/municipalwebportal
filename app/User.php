<?php

namespace App;

use App\Helpers\Traits\FormatDates;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Laravel\Passport\HasApiTokens;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Database\Eloquent\SoftDeletes;
use Dyrynda\Database\Support\GeneratesUuid;

class User extends Authenticatable implements MustVerifyEmail
{
    use HasApiTokens, Notifiable, HasRoles, GeneratesUuid, FormatDates;

//    protected $guard_name = 'api';

    use SoftDeletes;

    protected $casts = ['uuid' => 'uuid'];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'uuid','firstname','lastname', 'contactnumber', 'email', 'email_verified_at', 'activation_token','password', 'status_id', 'last_loggedin_at'
    ];

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at', 'last_loggedin_at', 'email_verified_at'];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'id', 'password', 'remember_token', 'activation_token'
    ];

    /**
     *
     *
     */
    public function assignments()
    {
        return $this->morphMany(Assignment::class, 'assignable');
    }

    /**
     *
     *
     */
    public function devices()
    {
        return $this->belongsToMany(Device::class);
    }

    /**
     *
     *
     */
    public function departments()
    {
        return $this->belongsToMany(Department::class);
    }

    /**
     *
     *
     */
    public function incidents()
    {
        return $this->belongsToMany(Incident::class)
            ->withTimestamps();
    }


    /**
     *
     *
     * @return HasMany
     */
    public function otp()
    {
        return $this->hasMany(OTP::class);
    }

    /**
     * A user has one Social Account Profile
     *
     * @return HasOne
     */
    public function profile()
    {
        return $this->hasOne(SocialAccount::class);
    }

    /**
     * A user has one Status
     *
     * @return BelongsTo
     */
    public function status()
    {
        return $this->belongsTo(Status::class);
    }

    /**
     *
     *
     */
    public function working_groups()
    {
        return $this->belongsToMany(WorkingGroup::class)->withTimestamps()
            ->withPivot('is_leader', 'instructions', 'assigner_id');
    }

    /**
     * Gets the autogenerated Full Name of the User
     *
     * @return string
     */
    public function getFullNameAttribute()
    {
        return ucfirst($this->firstname) . ' ' . ucfirst($this->lastname);
    }

    /**
     * The array of $statuses.
     *
     * @var array
     */
    public static $statuses = [
        'available' => 'available',
        'inactive' => 'inactive',
        'active' => 'active',
        'blocked' => 'blocked',
        'assigned' => 'assigned',
        'trashed' => 'trashed'
    ];

    public function getRouteKeyName()
    {
        return 'uuid';
    }

    /**
     * Override the mail body for reset password notification mail.
     * @param $token
     */
    public function sendPasswordResetNotification($token)
    {
        $this->notify(new \App\Notifications\MailResetPasswordNotification($token));
    }
}
